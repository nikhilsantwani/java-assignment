**(3)reverse String
class Reverse
{
    public static String reverseWord(String str)
    {
        char[] c = new char[str.length()];
        for(int i=0;i<str.length();i++){
            c[i] = str.charAt(str.length() - 1 - i);
        }
//**
               return new String(c);
//**
    }
    public static void main(String[] args) {
        String str = "ulpztspw";
        System.out.print(reverseWord(str));
    }
}


(4) missing elements in array
import java.util.*;
class Solution {
   static int missingNumber(int array[], int n) {
        int sum=0;
        int c_sum=0;
        int missing=0;
        for (int i=1;i<=n;i++){
            sum+=i;
        }
        for (int i=0;i< array.length;i++){
            c_sum+=array[i];
        }
       missing=sum-c_sum;
        return missing;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("enter size = ");
        int size = sc.nextInt();
        int[] a = new int[size];
        System.out.println("Enter Elements = ");
        for (int i=0;i<a.length;i++){
            a[i] = sc.nextInt();
        }
        System.out.println("Enter n = ");
        int n = sc.nextInt();
        System.out.println(missingNumber(a,n));
    }
}

// 
(5) => Find duplicate elements
import java.util.*;

class Solution {
    public static ArrayList<Integer> duplicates(int arr[], int n) {
        ArrayList<Integer> result = new ArrayList<>();
        int[] count = new int[n];
        
        // Count occurrences of each element
        for (int i = 0; i < n; i++) {
            count[arr[i]]++;
        }
        
        // Collect elements that appear more than once
        for (int i = 0; i < n; i++) {
            if (count[i] > 1) {
                result.add(i);
            }
        }
        
        // If no duplicate is found, add -1 to the result
        if (result.isEmpty()) {
            result.add(-1);
        }
        
        return result;
    }
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter size = ");
        int size = sc.nextInt();
        int[] a = new int[size];
        System.out.println("Enter Elements = ");
        for (int i = 0; i < a.length; i++) {
            a[i] = sc.nextInt();
        }
        
        ArrayList<Integer> duplicates = duplicates(a, size);
        for (int num : duplicates) {
            System.out.print(num + " ");
        }
    }
}

**(3)reverse String
class Reverse
{
    public static String reverseWord(String str)
    {
        char[] c = new char[str.length()];
        for(int i=0;i<str.length();i++){
            c[i] = str.charAt(str.length() - 1 - i);
        }
//**
               return new String(c);
//**
    }
    public static void main(String[] args) {
        String str = "ulpztspw";
        System.out.print(reverseWord(str));
    }
}


(4) missing elements in array
import java.util.*;
class Solution {
   static int missingNumber(int array[], int n) {
        int sum=0;
        int c_sum=0;
        int missing=0;
        for (int i=1;i<=n;i++){
            sum+=i;
        }
        for (int i=0;i< array.length;i++){
            c_sum+=array[i];
        }
       missing=sum-c_sum;
        return missing;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("enter size = ");
        int size = sc.nextInt();
        int[] a = new int[size];
        System.out.println("Enter Elements = ");
        for (int i=0;i<a.length;i++){
            a[i] = sc.nextInt();
        }
        System.out.println("Enter n = ");
        int n = sc.nextInt();
        System.out.println(missingNumber(a,n));
    }
}

// 
(5) => Find duplicate elements
import java.util.*;

class Solution {
    public static ArrayList<Integer> duplicates(int arr[], int n) {
        ArrayList<Integer> result = new ArrayList<>();
        int[] count = new int[n];
        
        // Count occurrences of each element
        for (int i = 0; i < n; i++) {
            count[arr[i]]++;
        }
        
        // Collect elements that appear more than once
        for (int i = 0; i < n; i++) {
            if (count[i] > 1) {
                result.add(i);
            }
        }
        
        // If no duplicate is found, add -1 to the result
        if (result.isEmpty()) {
            result.add(-1);
        }
        
        return result;
    }
    
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter size = ");
        int size = sc.nextInt();
        int[] a = new int[size];
        System.out.println("Enter Elements = ");
        for (int i = 0; i < a.length; i++) {
            a[i] = sc.nextInt();
        }
        
        ArrayList<Integer> duplicates = duplicates(a, size);
        for (int num : duplicates) {
            System.out.print(num + " ");
        }
    }
}

(6)Sort The Array

import java.util.Arrays;

class Solution {
    static int[] sortArr(int[] arr, int n) {
        Arrays.sort(arr); // This sorts the array in ascending order
        return arr;
    }

    public static void main(String[] args) {
        int[] a = {1, 5, 3, 2};
        int[] sortedArray = sortArr(a, a.length);
        // Printing the sorted array
        for (int i = 0; i < sortedArray.length; i++) {
            System.out.print(sortedArray[i] + " ");
        }
    }
}

(m-2)
class Solution
{
   static int[] sortArr(int[] arr, int n)
    {
        int temp=0;
        for (int i=0;i<n-1;i++){
            for (int j=0;j<n-1-i;j++) {
                if (arr[j] > arr[j + 1]) {
                    temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
        return arr;
    }

    public static void main(String[] args) {
        int[] a = {1,5,3,2};
        int[] sortedArray = sortArr(a, a.length);
        for (int i = 0; i < sortedArray.length; i++) {
            System.out.print(sortedArray[i] + " ");
        }
    }
}

(Q-7) Sort An matrix
 public class Main {
     public static void main(String[] args) {
         int[][] a = {{5,4,7},{1,3,8},{2,9,6}};
         int row=a.length;
         int col=a[0].length;
         int index=0;
         int temp2=0;
         int[] temp = new int[row*col];

         System.out.println("Original Matrix ");
         for (int i=0;i<a.length;i++){
             for (int j=0;j<a[i].length;j++){
                 System.out.print(a[i][j]+" ");
             }
             System.out.println();
         }
         
         for (int i=0;i<row;i++){
             for (int j=0;j<col;j++){
                 temp[index++]=a[i][j];
             }
         }
//         to print temp Array
//         for (int i=0;i< temp.length;i++){
//             System.out.print(temp[i]+" ");
//         }
         for (int i=0;i< temp.length-1;i++){
             for (int j=0;j< temp.length-1-i;j++){
                 if (temp[j]>temp[j+1]){
                     temp2=temp[j];
                     temp[j]=temp[j+1];
                     temp[j+1]=temp2;
                 }
             }
         }
         //         to print Sorted temp Array
//         System.out.println();
//         for (int i=0;i< temp.length;i++){
//             System.out.print(temp[i]+" ");
//         }
         index=0;
         for (int i=0;i<row;i++){
             for (int j=0;j<col;j++){
                 a[i][j]=temp[index++];
             }
         }
         System.out.println("Sorted Matrix ");
         for (int i=0;i<a.length;i++){
             for (int j=0;j<a[i].length;j++){
                 System.out.print(a[i][j]+" ");
             }
             System.out.println();
         }
}
}

(Q-8) Rotate Image by 90 degree
public class Main {
    public static void main(String[] args) {
        int[][] a = {{1,2,3,4},{5,6,7,8},{9,10,11,12}};
        int row = a.length;
        int col = a[0].length;
        int[][] b = new int[col][row]; 
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                b[j][row-1-i] = a[i][j]; 
            }
        }
        for (int i = 0; i < col; i++) { // Corrected: loop bounds
            for (int j = 0; j < row; j++) { // Corrected: loop bounds
                System.out.print(b[i][j] + " ");
            }
            System.out.println();
        }
    }
}
(Q-9) Turn an image by 90-degree
public class Main {
    public static void main(String[] args) {
        int[][] a = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12},{13,14,15,16}};
        int temp = 0;
        int temp1 = 0;

        int n=a.length;

        for (int i = 0; i < a.length; i++) {
            for (int j = 0; j < a.length; j++) {
                System.out.print(a[i][j]+" ");
            }
            System.out.println();
        }
        System.out.println();
        for (int i = 0; i < a.length; i++) {
            for (int j = 0; j < a.length; j++) {
                temp = a[i][j];
                if (i != j && i < j) {
                    a[i][j] = a[j][i];
                    a[j][i] = temp;
                }
            }
        }
        for (int i = 0; i < a.length; i++) {
            for (int j = 0; j < a.length; j++) {
                System.out.print(a[i][j]+" ");
            }
            System.out.println();

        }
        for (int i = 0; i < n-2; i++) {
            for (int j = i+1; j < n-1; j++) {
                temp1 = a[i][j];
                a[i][j]=a[j][i];
                a[j][i]=temp1;
            }
        }
        reverseRows(a);
        System.out.println();
        for (int i = 0; i < a.length; i++) {
            for (int j = 0; j < a.length; j++) {
                System.out.print(a[i][j]+" ");
            }
            System.out.println();
        }
    }
    public static void reverseRows(int[][] matrix) {
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[i].length / 2; j++) {
                int temp = matrix[i][j];
                matrix[i][j] = matrix[i][matrix[i].length - j - 1];
                matrix[i][matrix[i].length - j - 1] = temp;
            }
        }
    }
}

(Q-10) Multiply of matrix.
public class Main {
    public static void main(String[] args) {
        int[][] a = {{1,2,3},{4,5,6},{7,8,9}};
        int[][] b = {{1,2,3},{4,5,6},{7,8,9}};
        int[][] c = new int[a.length][a.length];
        for (int i = 0; i < a.length; i++) {
            for (int j = 0; j < a.length; j++) {
                System.out.print(a[i][j]+" ");
            }
            System.out.println();
        }
        for (int i = 0; i < a.length; i++) {
            for (int j = 0; j < a.length; j++) {
                c[i][j]=a[i][j]*b[i][j];
            }
        }
        System.out.println("multi = ");
        for (int i = 0; i < a.length; i++) {
            for (int j = 0; j < a.length; j++) {
                System.out.print(c[i][j]+" ");
            }
            System.out.println();
        }
    }
}

(Q-11) maximum element of each row
import java.util.*;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter row = ");
        int row = sc.nextInt();
        System.out.println("Enter col = ");
        int col = sc.nextInt();
        int[][] a =  new int[row][col];
        for (int i=0;i<a.length;i++) {
            for (int j = 0; j < a.length; j++) {
                a[i][j] = sc.nextInt();
            }
        }

        int max=0;
        for (int i=0;i<a.length;i++){
            for (int j=0;j<a.length;j++){
                if (a[i][j]>max){
                    max=a[i][j];
                }
            }
            System.out.println("Max element of "+i+" th row = "+max);
            max=0;
        }
    }
}



import java.util.*;
public class Main {
    public static void main(String[] args) {
        int count=0;
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter row = ");
        int row = sc.nextInt();
        System.out.println("Enter col = ");
        int col = sc.nextInt();
        int[][] a =  new int[row][col];
        for (int i=0;i<a.length;i++) {
            for (int j = 0; j < a[i].length; j++) {
                a[i][j] = sc.nextInt();
            }
        }
        for (int i=0;i<a.length;i++) {
            for (int j = 0; j <a[i].length-1; j++) {
                if (a[i][j] > a[i][j+1]){
                    count++;
                    break;
                }
            }
        }
        System.out.println("count = "+count);
    }
}

//import java.util.*;
//
//public class Main {
//    public static void main(String[] args) {
//        int count = 0;
//        Scanner sc = new Scanner(System.in);
//
//        System.out.print("Enter row = ");
//        int row = sc.nextInt();
//        System.out.print("Enter col = ");
//        int col = sc.nextInt();
//        int[][] a = new int[row][col];
//
//        System.out.println("Enter elements:");
//        for (int i = 0; i < a.length; i++) {
//            for (int j = 0; j < a[i].length; j++) {
//                a[i][j] = sc.nextInt();
//            }
//        }
//
//        // Iterate over each row to count rows with elements out of order
//        for (int i = 0; i < a.length; i++) {
//            for (int j = 0; j < a[i].length - 1; j++) { // Adjusted loop to prevent out-of-bounds
//                if (a[i][j] > a[i][j + 1]) {
//                    count++;
//                    break; // Move to the next row as soon as an out-of-order pair is found
//                }
//            }
//        }
//
//        System.out.println("count = " + count);
//    }
//}
  

                                 







