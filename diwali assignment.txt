2)      Create a Java program to determine whether a year is a leap year, but with additional
        conditions: if it's divisible by 4, it's a leap year, unless it's divisible by 100, except
        when it's also divisible by 400.

import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("enter year = ");
        int y = sc.nextInt();
        if (y%4 ==0 && y%100 !=0){
            System.out.println("it's a leap year ");
        } else if (y%400==0) {
            System.out.println("it's also a leap year ");
        }
        else {
            System.out.println("it's not a leap year ");
        }
    }
}

3.Write a Java program that accepts a number as input and determines if it's positive,
negative, or zero.

import java.util.*;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("enter number = ");
        int n = sc.nextInt();
        if (n>0){
            System.out.println("posiive ");
        } else if (n==0) {
            System.out.println("zero ");
        }
        else {
            System.out.println("negative ");
        }
    }
}

5.Write a Java program to simulate a basic calculator that can perform addition,
subtraction, multiplication, and division operations.

import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("enter number =");
        int a= sc.nextInt();
        int b = sc.nextInt();
        sc.nextLine();
        System.out.println("enter operator = ");
        String sign = sc.nextLine();
        if ("add".equals(sign)){
            System.out.println("add = "+(a+b));
        } else if ("sub".equals(sign)) {
            System.out.println("sub = "+(a-b));
        } else if ("mul".equals(sign)) {
            System.out.println("mul = "+(a*b));
        } else if ("div".equals(sign)) {
            if (b!=0) {
                System.out.println("div = " + (a / b));
            }
            else {
                System.out.println("error : divison by zero is not allow");
            }
        }
        else {
            System.out.println("operator not exist ");
        }
    }
}


6.Create a program that reads a year and a month as input and prints the number of
days in that month, considering leap years for February.

import java.util.*;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("enter year = ");
        int year = sc.nextInt();
        System.out.println("enter month =");
        int month = sc.nextInt();

        int daysInMonth;

        switch (month){

            case 2:  daysInMonth = (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0) ? 29 : 28;
                break;
            case 4:
            case 6:
            case 9:
            case 11:
                daysInMonth=30;
                break;
            default:
                if (month >= 1 && month <= 12) {
                    // January and other months
                    daysInMonth = 31;
                } else {
                    System.out.println("Invalid month. Please enter a month between 1 and 12.");
                    return;
                }
                break;
        }
        System.out.println("no. of days in a month "+daysInMonth);
    }
}


8.Implement a program that calculates the age of a person based on their birthdate
and the current date.
import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter date of birth (DD): ");
        int bornDate = sc.nextInt();
        System.out.println("Enter month of birth (MM): ");
        int month = sc.nextInt();
        System.out.println("Enter year of birth (YYYY): ");
        int year = sc.nextInt();
        System.out.println("Enter current date (DD): ");
        int currentDate = sc.nextInt();
        System.out.println("Enter current month (MM): ");
        int currentMonth = sc.nextInt();
        System.out.println("Enter current year (YYYY): ");
        int currentYear = sc.nextInt();

        int finalY, finalM, finalD;

        if (currentYear < year || (currentYear == year && currentMonth < month) || (currentYear == year && currentMonth == month && currentDate < bornDate)) {
            System.out.println("Invalid date. Current date is earlier than the birthdate.");
            return;
        }

        finalY = currentYear - year - (currentMonth < month || (currentMonth == month && currentDate < bornDate) ? 1 : 0);
        finalM = currentMonth - month + (currentMonth < month || (currentMonth == month && currentDate < bornDate) ? 12 : 00);
        finalD = currentDate - bornDate + (currentDate < bornDate ? 30 : 0); // Assuming a month has 30 days for simplicity

        System.out.println("Age: " + finalY + " years, " + finalM + " months, " + finalD + " days");
    }
}

10.Design a Java program to calculate the income tax for an individual based on their
annual income. The program should apply different tax rates to different income
ranges as defined by the tax laws. The tax rates should be applied progressively,
with higher income levels incurring a higher tax rate. The program should prompt the
user to input their income, and then it should determine the tax owed based on the
following income ranges and associated tax rates:
Income up to $50,000: 10% tax
Income from $50,001 to $100,000: 20% tax
Income over $100,000: 30% tax

import java.util.*;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("enter income ");
        if (sc.hasNextInt()){
            int i = sc.nextInt();
        double taxrate;
        if (i < 50000) {
            System.out.println("10% tax apply");
            taxrate = 0.10;
        } else if (i > 50000 && i < 100000) {
            System.out.println("20% tax apply ");
            taxrate = 0.20;
        } else {
            System.out.println("30% tax apply");
            taxrate = 0.30;
        }
        double taxAmount = i * taxrate;
            System.out.println("tax rate ="+(taxrate*100));
            double netIncome= i-taxAmount;
            System.out.println("actual income ="+netIncome+" $");
    }
    }
}

11.Create a program that uses a for loop to find and print all the prime numbers
between 1 and 100.

public class Main {
    public static void main(String[] args) {
        for (int i=1;i<100;i++){
 boolean isPrime =true;
            for (int n=2;n<i;n++){

                if (i%n==0){
                    isPrime=false;
                    break;
                }
                if (isPrime) {
                    System.out.println(i + " is a prime number");
                } else {
                    System.out.println(i + " is not a prime number");
                }
            }
        }
    }
}

12.Create a program that calculates and prints the sum of the squares of all even
numbers between 1 and 100 using a for loop.

public class Main {
    public static void main(String[] args) {
        int sum=0;
        for (int i=1;i<=100;i++){
            if (i%2==0){
               sum+=i*i;
            }
        }
        System.out.println("sum of square of even no. 1 to 100"sum);
    }
}

13.Create a Java program that calculates and prints the sum of the first 100 prime
numbers using a for loop.


public class Main {
    public static void main(String[] args) {
        int sum=0;
        for (int i=1;i<=100;i++){
          boolean isPrime = true;
          for (int n=2;n<i;n++){
              if (i%n==0){
                  isPrime=false;
                  break;
              }
              sum+=i;
          }
        }
        System.out.println("sum of prime no. 1 to 100 = "+sum);
    }
}


16) Create an abstract class GeometricShape with abstract methods calculateArea() and
calculateVolume(). Create a subclass Cube that extends GeometricShape and
provides implementations for both methods.

abstract class GeometricShap{
   abstract void calculateArea() ;
    abstract void calcuteVolume() ;
}
        class cube extends GeometricShap{
            void calculateArea() {
                int a=4;
                int area = 6*a*a*a*a*a*a;
                System.out.println("area of cube = "+area);
            }
            void calcuteVolume() {
            int a=6;
            int volume =a*a*a;
                System.out.println("vol. of cube = "+volume);
            }
        }
        public class Main {
            public static void main(String[] args) {
                cube k = new cube();
                k.calculateArea();
                k.calcuteVolume();
            }
}