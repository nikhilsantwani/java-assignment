# Collection
(Q-1) How to Print a Collection in Java?

import java.util.*;

public class Main {
    public static void main(String[] args) {
        String[] gfg = { "Rahul", "Utkarsh", "Shubham", "Neelam"};

        List<String> l = new ArrayList<String>();
        Collections.addAll(l,gfg);
        System.out.println(l);
    }
}


(Q-2) How to Make a Collection Read-Only in Java?

// Java Program to make
// Set Interface Object Read-Only

import java.util.Set;
import java.util.HashSet;
import java.util.Collections;

// Driver Class
class GFG {
    // Main Function
    public static void main(String[] args)
    {
        // Set of Integer
        Set<Integer> numbers = new HashSet<Integer>();

        // Set have 1 to 10 numbers
        for (int i = 1; i <= 5; i++) {
            numbers.add(i);
        }

        // print the integers
        numbers.stream().forEach(System.out::print);

        // Removing element from the list
        numbers.remove(5);

        System.out.println("\nAfter Performing Operation");

        numbers.stream().forEach(System.out::print);

        System.out.println(
            "\nSet is also By Default Readable and Writable");

        // Now making Read-Only Set
        // Using unmodifiableSet() method.
        try {
            numbers = Collections.unmodifiableSet(numbers);

            // This line will generate an Exception
            numbers.remove(4);
        }
        catch (UnsupportedOperationException
                unsupportedOperationException) {
            System.out.println(
                "Exceptions is "
                + unsupportedOperationException);
        }
        finally {
            System.out.println(numbers.contains(3));
            System.out.println("Now Set is Read-Only");
        }
    }
}


(Q-3) Java Program to Compare Elements in a Collection
// Java Program to Compare Elements in a Collection 
import java.io.*; 
import java.util.*; 

class GFG { 
	public static void main(String[] args) 
	{ 
		// List initialization 
		List<Integer> l = new ArrayList<>(); 

		// Add elements in the list 
		l.add(3); 
		l.add(5); 
		l.add(18); 
		l.add(4); 
		l.add(6); 

		// Minimum in the list 
		int minimum = Collections.min(l); 

		// Maximum in the list 
		int maximum = Collections.max(l); 

		if (minimum == maximum) { 
			System.out.println("All elements are equal"); 
		} 
		else { 
			System.out.println("Min value of our list : "
							+ minimum); 
			System.out.println("Max value of our list : "
							+ maximum); 
		} 
	} 
}
# Queue :- 

import java.util.LinkedList;
import java.util.Queue;

public class QueueExample {

    public static void main(String[] args)
    {
        Queue<Integer> q
            = new LinkedList<>();


        for (int i = 0; i < 5; i++)
            q.add(i);


        System.out.println("Elements of queue "
                           + q);

        int removedele = q.remove();
        System.out.println("removed element-"
                           + removedele);

        System.out.println(q);

        int head = q.peek();
        System.out.println("head of queue-"
                           + head);

      
        int size = q.size();
        System.out.println("Size of queue-"
                           + size);
    }
}
